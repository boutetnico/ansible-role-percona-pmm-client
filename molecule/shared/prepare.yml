---
- name: Prepare
  hosts: all
  vars:
    docker__package_dependencies:
      - "apt-transport-https"
      - "gnupg2"
      - "python-backports.ssl-match-hostname"
    docker__apt_key_id: "9DC858229FC7DD38854AE2D88D81803C0EBFCD88"
    docker__apt_key_url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
    docker__apt_repository: >
      deb [arch=amd64]
      https://download.docker.com/linux/{{ ansible_distribution | lower }}
      {{ ansible_distribution_release }} {{ docker__channel | join (' ') }}
    docker__channel: ["stable"]
    docker__pip_dependencies:
      - "python-setuptools"
      - "python{{ '3' if ansible_python.version.major == 3 else '' }}-pip"
    docker__pip_packages:
      - docker

  pre_tasks:
    - name: Install Docker's dependencies
      apt:
        name: "{{ docker__package_dependencies + docker__pip_dependencies }}"

    - name: Add Docker's public GPG key to the APT keyring
      apt_key:
        id: "{{ docker__apt_key_id }}"
        url: "{{ docker__apt_key_url }}"

    - name: Configure Docker's upstream APT repository
      apt_repository:
        repo: "{{ docker__apt_repository }}"
        update_cache: true

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Install Python packages
      pip:
        name: "{{ item }}"
        state: present
      loop: "{{ docker__pip_packages }}"

    - name: Create a MySQL test container
      docker_container:
        env:
          MYSQL_ROOT_PASSWORD: root
        image: percona:latest
        name: pmm-mysql
        ports:
          - "3306:3306"
        state: started

    - name: Create a MongoDB test container
      docker_container:
        image: mongo:latest
        name: pmm-mongo
        ports:
          - "27017:27017"
        state: started

  roles:
    - role: ansible-role-pmm-server
